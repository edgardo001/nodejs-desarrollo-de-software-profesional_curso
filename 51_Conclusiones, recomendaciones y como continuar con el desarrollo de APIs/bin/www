#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('45-generacion-de-proyecto-y-definicion-de-rutas-para-api:server');
var http = require('http');
var db = require('mongodb').MongoClient; //Importa el driver de la db

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server;
//Creo la cadena de conexion para mongodb
var url = "mongodb://127.0.0.1:27017/proyecto_api";
//Creo la conexion con mongodb
db.connect(url, (err, db) => {
  if (err) {
    console.log("ERROR de conexion con BD");
  } else {
    //Ejecucion de la app

    //permite añadir configuraciones de la app, añade variables a una clave, key, llave
    //permito usar la conexion de la db en cualquier parte del codigo
    //Para testear, ir a la url http://localhost:3000/db
    //El test se configuro en "routes/index.js", linea "router.get('/db', function(req, res, next) {"
    app.set('db', db);

    //Solo se iniciara si la BD esta funcionando
    server = http.createServer(app);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}
